<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Buscador de Logs</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        body {
            background-color: #f5f5f5;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e0e0e0;
        }
        .header h1 {
            font-size: 24px;
            color: #333;
        }
        .log-count {
            background-color: #f0f0f0;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 14px;
        }
        .actions {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .search-area {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .search-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }
        button {
            background-color: #4a90e2;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
        }
        button:hover {
            background-color: #357abd;
        }
        button.secondary {
            background-color: #f0f0f0;
            color: #333;
        }
        button.secondary:hover {
            background-color: #e0e0e0;
        }
        button.danger {
            background-color: #e74c3c;
        }
        button.danger:hover {
            background-color: #c0392b;
        }
        .results-container {
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            margin-bottom: 20px;
            overflow: hidden;
        }
        .results-header {
            background-color: #f5f5f5;
            padding: 10px 15px;
            font-weight: bold;
            border-bottom: 1px solid #e0e0e0;
        }
        .results-list {
            max-height: 400px;
            overflow-y: auto;
            background-color: #fafafa;
        }
        .log-item {
            padding: 8px 15px;
            border-bottom: 1px solid #eee;
            font-family: 'Courier New', Courier, monospace;
            font-size: 14px;
            cursor: pointer;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .log-item:hover {
            background-color: #f0f7ff;
        }
        .log-item.selected {
            background-color: #e3f2fd;
        }
        .status-bar {
            margin-top: 20px;
            padding: 10px;
            background-color: #f5f5f5;
            border-radius: 4px;
            font-size: 14px;
            color: #555;
        }
        .pagination {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin-top: 15px;
        }
        .pagination button {
            min-width: 30px;
            padding: 5px;
        }
        .hidden {
            display: none !important;
        }
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
        }
        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 600px;
        }
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .modal-header h2 {
            font-size: 18px;
        }
        .close-btn {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #555;
        }
        .modal-body {
            margin-bottom: 15px;
        }
        .modal-body textarea, .modal-body input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .modal-body textarea {
            height: 100px;
            font-family: 'Courier New', Courier, monospace;
        }
        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        .loading-indicator {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 200;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 4px solid #3498db;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .progress-bar-container {
            width: 100%;
            background-color: #f0f0f0;
            border-radius: 4px;
            margin-top: 10px;
            overflow: hidden;
        }
        .progress-bar {
            height: 20px;
            width: 0%;
            background-color: #4a90e2;
            text-align: center;
            line-height: 20px;
            color: white;
            transition: width 0.3s;
        }
        .storage-info {
            font-size: 12px;
            color: #666;
            text-align: right;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Buscador de Logs</h1>
            <div class="log-count" id="logCount">Logs cargados: 0</div>
        </div>

        <div class="actions">
            <button id="loadLogsBtn">Cargar Logs</button>
            <button id="addLogBtn">Agregar Log Manual</button>
            <button id="clearLogsBtn" class="danger">Limpiar Logs</button>
            <button id="exportLogsBtn" class="secondary">Exportar Logs</button>
            <input type="file" id="fileInput" accept=".txt,.json,.log" style="display: none;">
        </div>

        <div class="search-area">
            <input type="text" id="searchInput" class="search-input" placeholder="Buscar en logs...">
            <button id="searchBtn">Buscar</button>
        </div>

        <div class="results-container">
            <div class="results-header">Resultados de búsqueda</div>
            <div class="results-list" id="resultsList"></div>
        </div>

        <div class="pagination" id="pagination"></div>

        <div class="actions">
            <button id="copySelectedBtn">Copiar Seleccionado</button>
            <button id="copyAllBtn">Copiar Todos los Resultados</button>
        </div>

        <div class="status-bar" id="statusBar">Listo</div>
        <div class="storage-info" id="storageInfo"></div>
    </div>

    <!-- Modal para añadir log manual -->
    <div class="modal hidden" id="addLogModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Añadir Log</h2>
                <button class="close-btn" id="closeAddLogModal">&times;</button>
            </div>
            <div class="modal-body">
                <textarea id="logTextarea" placeholder="Introduce el log aquí..."></textarea>
            </div>
            <div class="modal-footer">
                <button class="secondary" id="cancelAddLog">Cancelar</button>
                <button id="confirmAddLog">Añadir</button>
            </div>
        </div>
    </div>

    <!-- Modal para cargar logs grandes -->
    <div class="modal hidden" id="loadingModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Cargando Logs</h2>
            </div>
            <div class="modal-body">
                <p id="loadingStatus">Procesando archivo...</p>
                <div class="progress-bar-container">
                    <div class="progress-bar" id="loadingProgress">0%</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para configuración de almacenamiento -->
    <div class="modal hidden" id="storageModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Almacenamiento</h2>
                <button class="close-btn" id="closeStorageModal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Los logs exceden el límite de almacenamiento local (aproximadamente 5MB).</p>
                <p>Opciones disponibles:</p>
                <ul style="margin-left: 20px; margin-bottom: 15px;">
                    <li>Guardar una cantidad reducida de logs</li>
                    <li>Mantener solo en memoria (se perderán al cerrar)</li>
                    <li>Exportar logs a un archivo</li>
                </ul>
                <p>¿Cómo quieres proceder?</p>
            </div>
            <div class="modal-footer">
                <button class="secondary" id="keepInMemoryBtn">Solo en memoria</button>
                <button id="savePartialBtn">Guardar parcial</button>
                <button id="exportLogsModalBtn">Exportar</button>
            </div>
        </div>
    </div>

    <div class="loading-indicator hidden" id="loadingIndicator">
        <div class="spinner"></div>
    </div>

    <script>
        // Clase principal para manejar la aplicación
        class LogSearchApp {
            constructor() {
                this.logs = [];
                this.searchResults = [];
                this.currentPage = 1;
                this.itemsPerPage = 100;
                this.selectedLogIndex = -1;
                this.workerSupported = typeof Worker !== 'undefined';
                this.worker = null;
                this.storageAvailable = this.isStorageAvailable();
                this.maxStorageSize = 4.5 * 1024 * 1024; // Aprox. 4.5MB para estar seguros
                this.keepInMemoryOnly = false;
                this.lastSaveTime = 0;
                this.saveInterval = 30000; // 30 segundos entre guardados automáticos
                
                this.initializeElements();
                this.setupEventListeners();
                
                // Inicializar worker si es soportado
                if (this.workerSupported) {
                    this.initWorker();
                }
                
                // Cargar logs guardados
                this.loadSavedLogs();
                
                // Configurar guardado automático
                this.setupAutoSave();
                
                // Actualizar info de almacenamiento
                this.updateStorageInfo();
            }

            initializeElements() {
                // Elementos DOM
                this.elements = {
                    logCount: document.getElementById('logCount'),
                    loadLogsBtn: document.getElementById('loadLogsBtn'),
                    addLogBtn: document.getElementById('addLogBtn'),
                    clearLogsBtn: document.getElementById('clearLogsBtn'),
                    exportLogsBtn: document.getElementById('exportLogsBtn'),
                    fileInput: document.getElementById('fileInput'),
                    searchInput: document.getElementById('searchInput'),
                    searchBtn: document.getElementById('searchBtn'),
                    resultsList: document.getElementById('resultsList'),
                    pagination: document.getElementById('pagination'),
                    copySelectedBtn: document.getElementById('copySelectedBtn'),
                    copyAllBtn: document.getElementById('copyAllBtn'),
                    statusBar: document.getElementById('statusBar'),
                    storageInfo: document.getElementById('storageInfo'),
                    
                    // Modales
                    addLogModal: document.getElementById('addLogModal'),
                    closeAddLogModal: document.getElementById('closeAddLogModal'),
                    logTextarea: document.getElementById('logTextarea'),
                    cancelAddLog: document.getElementById('cancelAddLog'),
                    confirmAddLog: document.getElementById('confirmAddLog'),
                    
                    loadingModal: document.getElementById('loadingModal'),
                    loadingStatus: document.getElementById('loadingStatus'),
                    loadingProgress: document.getElementById('loadingProgress'),
                    
                    storageModal: document.getElementById('storageModal'),
                    closeStorageModal: document.getElementById('closeStorageModal'),
                    keepInMemoryBtn: document.getElementById('keepInMemoryBtn'),
                    savePartialBtn: document.getElementById('savePartialBtn'),
                    exportLogsModalBtn: document.getElementById('exportLogsModalBtn'),
                    
                    loadingIndicator: document.getElementById('loadingIndicator')
                };
            }

            setupEventListeners() {
                // Configurar eventos
                this.elements.loadLogsBtn.addEventListener('click', () => this.elements.fileInput.click());
                this.elements.fileInput.addEventListener('change', (e) => this.handleFileSelect(e));
                this.elements.addLogBtn.addEventListener('click', () => this.showAddLogModal());
                this.elements.clearLogsBtn.addEventListener('click', () => this.clearLogs());
                this.elements.exportLogsBtn.addEventListener('click', () => this.exportLogs());
                this.elements.searchBtn.addEventListener('click', () => this.searchLogs());
                this.elements.searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.searchLogs();
                });
                this.elements.copySelectedBtn.addEventListener('click', () => this.copySelected());
                this.elements.copyAllBtn.addEventListener('click', () => this.copyAllResults());
                
                // Eventos del modal de agregar log
                this.elements.closeAddLogModal.addEventListener('click', () => this.hideAddLogModal());
                this.elements.cancelAddLog.addEventListener('click', () => this.hideAddLogModal());
                this.elements.confirmAddLog.addEventListener('click', () => this.addLogManually());
                
                // Eventos del modal de almacenamiento
                this.elements.closeStorageModal.addEventListener('click', () => this.hideStorageModal());
                this.elements.keepInMemoryBtn.addEventListener('click', () => {
                    this.keepInMemoryOnly = true;
                    this.hideStorageModal();
                    this.setStatus('Los logs se mantendrán solo en memoria');
                });
                this.elements.savePartialBtn.addEventListener('click', () => {
                    this.savePartialLogs();
                    this.hideStorageModal();
                });
                this.elements.exportLogsModalBtn.addEventListener('click', () => {
                    this.hideStorageModal();
                    this.exportLogs();
                });

                // Evento para guardar antes de cerrar la página
                window.addEventListener('beforeunload', () => {
                    if (!this.keepInMemoryOnly) {
                        this.saveLogs(true); // Forzar guardado al cerrar
                    }
                });
            }

            initWorker() {
                // Crear un blob con el código del worker
                const workerCode = `
                    self.onmessage = function(e) {
                        const { action, data } = e.data;
                        
                        if (action === 'processFile') {
                            const { fileContent, chunkSize } = data;
                            const lines = fileContent.split('\\n');
                            const totalLines = lines.length;
                            const validLines = [];
                            
                            for (let i = 0; i < totalLines; i++) {
                                const line = lines[i].trim();
                                if (line) {
                                    validLines.push(line);
                                }
                                
                                if (i % chunkSize === 0 || i === totalLines - 1) {
                                    const progress = Math.floor((i / totalLines) * 100);
                                    self.postMessage({
                                        type: 'progress',
                                        progress: progress,
                                        currentLine: i,
                                        totalLines: totalLines
                                    });
                                }
                            }
                            
                            self.postMessage({
                                type: 'complete',
                                logs: validLines
                            });
                        } else if (action === 'search') {
                            const { logs, searchTerm } = data;
                            const results = [];
                            
                            for (let i = 0; i < logs.length; i++) {
                                if (logs[i].toLowerCase().includes(searchTerm.toLowerCase())) {
                                    results.push({ index: i, text: logs[i] });
                                }
                                
                                if (i % 10000 === 0) {
                                    self.postMessage({
                                        type: 'searchProgress',
                                        progress: Math.floor((i / logs.length) * 100)
                                    });
                                }
                            }
                            
                            self.postMessage({
                                type: 'searchComplete',
                                results: results
                            });
                        }
                    };
                `;
                
                const blob = new Blob([workerCode], { type: 'application/javascript' });
                const workerUrl = URL.createObjectURL(blob);
                
                this.worker = new Worker(workerUrl);
                
                this.worker.onmessage = (e) => {
                    const { type, progress, logs, results } = e.data;
                    
                    if (type === 'progress') {
                        this.updateLoadingProgress(progress);
                    } else if (type === 'complete') {
                        this.finishLoading(logs);
                    } else if (type === 'searchProgress') {
                        this.updateSearchStatus(`Buscando... ${progress}%`);
                    } else if (type === 'searchComplete') {
                        this.displaySearchResults(results);
                    }
                };
            }

            isStorageAvailable() {
                try {
                    const testKey = '__storage_test__';
                    localStorage.setItem(testKey, testKey);
                    localStorage.removeItem(testKey);
                    return true;
                } catch (e) {
                    return false;
                }
            }

            setupAutoSave() {
                // Configurar guardado automático cada 30 segundos
                setInterval(() => {
                    if (!this.keepInMemoryOnly && this.logs.length > 0) {
                        // Solo guardar si ha pasado el tiempo desde el último guardado y hay cambios
                        const now = Date.now();
                        if (now - this.lastSaveTime >= this.saveInterval) {
                            this.saveLogs();
                        }
                    }
                }, this.saveInterval);
            }

            loadSavedLogs() {
                if (!this.storageAvailable) {
                    this.setStatus('Almacenamiento local no disponible');
                    return;
                }
                
                try {
                    // Primero intentamos cargar la versión comprimida si existe
                    let savedLogs;
                    
                    if (localStorage.getItem('savedLogsCompressed')) {
                        try {
                            const compressedData = localStorage.getItem('savedLogsCompressed');
                            savedLogs = JSON.parse(this.decompressData(compressedData));
                        } catch (e) {
                            console.warn('Error al descomprimir logs:', e);
                        }
                    }
                    
                    // Si no hay datos comprimidos o falló, intentar con la versión normal
                    if (!savedLogs && localStorage.getItem('savedLogs')) {
                        savedLogs = JSON.parse(localStorage.getItem('savedLogs'));
                    }
                    
                    // Si tenemos logs, cargarlos
                    if (savedLogs && Array.isArray(savedLogs)) {
                        this.logs = savedLogs;
                        this.updateLogCount();
                        this.setStatus(`Se cargaron ${this.logs.length.toLocaleString()} logs desde almacenamiento local`);
                    } else {
                        this.setStatus('No hay logs guardados');
                    }
                } catch (error) {
                    console.error('Error al cargar logs guardados:', error);
                    this.logs = [];
                    this.setStatus('Error al cargar logs guardados');
                }
            }

            compressData(data) {
                // Función simple para "comprimir" cadenas largas
                // En una aplicación real, se usaría una biblioteca como LZ-string o similar
                return btoa(encodeURIComponent(data));
            }
            
            decompressData(compressedData) {
                // Descomprimir la cadena
                return decodeURIComponent(atob(compressedData));
            }

            getStorageEstimate() {
                // Calcular uso aproximado de almacenamiento
                let total = 0;
                for (const key in localStorage) {
                    if (localStorage.hasOwnProperty(key)) {
                        total += (localStorage[key].length * 2) / 1024 / 1024; // En MB
                    }
                }
                return {
                    used: total,
                    max: 5, // La mayoría de navegadores tienen límite de 5MB
                    remaining: 5 - total
                };
            }

            updateStorageInfo() {
                if (!this.storageAvailable) {
                    this.elements.storageInfo.textContent = 'Almacenamiento local no disponible';
                    return;
                }
                
                const estimate = this.getStorageEstimate();
                this.elements.storageInfo.textContent = 
                    `Almacenamiento: ${estimate.used.toFixed(2)}MB / ${estimate.max}MB (${(estimate.used/estimate.max*100).toFixed(0)}%)`;
                
                // Actualizar color según el uso
                if (estimate.used > 4) {
                    this.elements.storageInfo.style.color = '#e74c3c'; // Rojo
                } else if (estimate.used > 3) {
                    this.elements.storageInfo.style.color = '#f39c12'; // Naranja
                } else {
                    this.elements.storageInfo.style.color = '#666';
                }
            }

            saveLogs(force = false) {
                if (!this.storageAvailable || this.keepInMemoryOnly) {
                    return false;
                }
                
                try {
                    // Verificar si hay algo que guardar
                    if (this.logs.length === 0) {
                        localStorage.removeItem('savedLogs');
                        localStorage.removeItem('savedLogsCompressed');
                        this.lastSaveTime = Date.now();
                        this.updateStorageInfo();
                        return true;
                    }
                    
                    // Preparar los datos para guardar
                    const logsJson = JSON.stringify(this.logs);
                    const estimatedSize = logsJson.length * 2 / 1024 / 1024; // Tamaño aproximado en MB
                    
                    // Verificar si excede el tamaño máximo
                    if (estimatedSize > this.maxStorageSize && !force) {
                        console.warn(`Los logs exceden el límite recomendado: ${estimatedSize.toFixed(2)}MB`);
                        this.showStorageModal();
                        return false;
                    }
                    
                    // Intentar guardar los datos comprimidos primero
                    try {
                        const compressedData = this.compressData(logsJson);
                        localStorage.setItem('savedLogsCompressed', compressedData);
                        localStorage.removeItem('savedLogs'); // Eliminar versión no comprimida
                    } catch (e) {
                        console.warn('Error al guardar logs comprimidos:', e);
                        // Si falla la compresión, intentar guardar sin comprimir
                        localStorage.setItem('savedLogs', logsJson);
                    }
                    
                    this.lastSaveTime = Date.now();
                    this.updateStorageInfo();
                    return true;
                } catch (error) {
                    console.error('Error al guardar logs:', error);
                    if (!force) {
                        this.showStorageModal();
                    }
                    return false;
                }
            }

            savePartialLogs() {
                // Guardar una versión reducida de los logs para caber en localStorage
                const maxSafeLength = 5000; // Número seguro de logs que cabrían en localStorage
                
                if (this.logs.length > maxSafeLength) {
                    // Tomar los últimos logs (más recientes)
                    const partialLogs = this.logs.slice(-maxSafeLength);
                    
                    // Guardar temporalmente los logs completos
                    const fullLogs = [...this.logs];
                    
                    // Establecer los logs parciales y guardarlos
                    this.logs = partialLogs;
                    const success = this.saveLogs(true);
                    
                    // Restaurar los logs completos en memoria
                    this.logs = fullLogs;
                    
                    if (success) {
                        this.setStatus(`Se guardaron los últimos ${maxSafeLength.toLocaleString()} logs por limitaciones de almacenamiento`);
                    } else {
                        this.setStatus('Error al guardar logs parciales');
                    }
                } else {
                    // Si la cantidad de logs es manejable, guardar normalmente
                    this.saveLogs(true);
                }
            }

            exportLogs() {
                if (this.logs.length === 0) {
                    alert('No hay logs para exportar');
                    return;
                }
                
                // Crear contenido para el archivo
                const content = this.logs.join('\n');
                const blob = new Blob([content], { type: 'text/plain' });
                
                // Crear enlace de descarga
                const a = document.createElement('a');
                const url = URL.createObjectURL(blob);
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                
                a.href = url;
                a.download = `logs_${timestamp}.txt`;
                document.body.appendChild(a);
                a.click();
                
                // Limpiar
                setTimeout(() => {
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                }, 100);
                
                this.setStatus('Logs exportados correctamente');
            }

            handleFileSelect(event) {
                const file = event.target.files[0];
                if (!file) return;
                
                this.showLoadingModal(`Cargando archivo: ${file.name}`);
                
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    const fileContent = e.target.result;
                    
                    if (this.workerSupported) {
                        this.worker.postMessage({
                            action: 'processFile',
                            data: {
                                fileContent: fileContent,
                                chunkSize: 10000
                            }
                        });
                    } else {
                        // Procesamiento en el hilo principal (más lento)
                        this.processFileContent(fileContent);
                    }
                };
                
                reader.onerror = () => {
                    this.hideLoadingModal();
                    alert('Error al leer el archivo');
                    this.setStatus('Error al leer el archivo');
                };
                
                reader.readAsText(file);
                event.target.value = ''; // Reset file input
            }

            processFileContent(fileContent) {
                const lines = fileContent.split('\n');
                const totalLines = lines.length;
                const validLines = [];
                
                for (let i = 0; i < totalLines; i++) {
                    const line = lines[i].trim();
                    if (line) {
                        validLines.push(line);
                    }
                    
                    if (i % 10000 === 0 || i === totalLines - 1) {
                        const progress = Math.floor((i / totalLines) * 100);
                        this.updateLoadingProgress(progress);
                    }
                }
                
                this.finishLoading(validLines);
            }

            updateLoadingProgress(progress) {
                this.elements.loadingProgress.style.width = `${progress}%`;
                this.elements.loadingProgress.textContent = `${progress}%`;
                this.elements.loadingStatus.textContent = `Procesando archivo... ${progress}%`;
            }

            fin
